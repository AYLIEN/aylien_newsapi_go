/*
 * AYLIEN News API
 *
 * The AYLIEN News API is the most powerful way of sourcing, searching and syndicating analyzed and enriched news content. It is accessed by sending HTTP requests to our server, which returns information to your client. 
 *
 * API version: 3.0
 * Contact: support@aylien.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package newsapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// TrendsApiService TrendsApi service
type TrendsApiService service

// ListTrendsOpts Optional parameters for the method 'ListTrends'
type ListTrendsOpts struct {
    Id optional.Interface
    Id2 optional.Interface
    Title optional.String
    Body optional.String
    Text optional.String
    TranslationsEnTitle optional.String
    TranslationsEnBody optional.String
    TranslationsEnText optional.String
    LinksPermalink optional.Interface
    LinksPermalink2 optional.Interface
    Language optional.Interface
    Language2 optional.Interface
    PublishedAtStart optional.String
    PublishedAtEnd optional.String
    CategoriesTaxonomy optional.String
    CategoriesConfident optional.Bool
    CategoriesId optional.Interface
    CategoriesId2 optional.Interface
    CategoriesLabel optional.Interface
    CategoriesLabel2 optional.Interface
    CategoriesLevel optional.Interface
    CategoriesLevel2 optional.Interface
    EntitiesTitleText optional.Interface
    EntitiesTitleText2 optional.Interface
    EntitiesTitleType optional.Interface
    EntitiesTitleType2 optional.Interface
    EntitiesTitleLinksDbpedia optional.Interface
    EntitiesTitleLinksDbpedia2 optional.Interface
    EntitiesBodyText optional.Interface
    EntitiesBodyText2 optional.Interface
    EntitiesBodyType optional.Interface
    EntitiesBodyType2 optional.Interface
    EntitiesBodyLinksDbpedia optional.Interface
    EntitiesBodyLinksDbpedia2 optional.Interface
    SentimentTitlePolarity optional.String
    SentimentTitlePolarity2 optional.String
    SentimentBodyPolarity optional.String
    SentimentBodyPolarity2 optional.String
    MediaImagesCountMin optional.Int32
    MediaImagesCountMax optional.Int32
    MediaImagesWidthMin optional.Int32
    MediaImagesWidthMax optional.Int32
    MediaImagesHeightMin optional.Int32
    MediaImagesHeightMax optional.Int32
    MediaImagesContentLengthMin optional.Int32
    MediaImagesContentLengthMax optional.Int32
    MediaImagesFormat optional.Interface
    MediaImagesFormat2 optional.Interface
    MediaVideosCountMin optional.Int32
    MediaVideosCountMax optional.Int32
    AuthorId optional.Interface
    AuthorId2 optional.Interface
    AuthorName optional.String
    AuthorName2 optional.String
    SourceId optional.Interface
    SourceId2 optional.Interface
    SourceName optional.Interface
    SourceName2 optional.Interface
    SourceDomain optional.Interface
    SourceDomain2 optional.Interface
    SourceLocationsCountry optional.Interface
    SourceLocationsCountry2 optional.Interface
    SourceLocationsState optional.Interface
    SourceLocationsState2 optional.Interface
    SourceLocationsCity optional.Interface
    SourceLocationsCity2 optional.Interface
    SourceScopesCountry optional.Interface
    SourceScopesCountry2 optional.Interface
    SourceScopesState optional.Interface
    SourceScopesState2 optional.Interface
    SourceScopesCity optional.Interface
    SourceScopesCity2 optional.Interface
    SourceScopesLevel optional.Interface
    SourceScopesLevel2 optional.Interface
    SourceLinksInCountMin optional.Int32
    SourceLinksInCountMax optional.Int32
    SourceRankingsAlexaRankMin optional.Int32
    SourceRankingsAlexaRankMax optional.Int32
    SourceRankingsAlexaCountry optional.Interface
    SocialSharesCountFacebookMin optional.Int32
    SocialSharesCountFacebookMax optional.Int32
    SocialSharesCountGooglePlusMin optional.Int32
    SocialSharesCountGooglePlusMax optional.Int32
    SocialSharesCountLinkedinMin optional.Int32
    SocialSharesCountLinkedinMax optional.Int32
    SocialSharesCountRedditMin optional.Int32
    SocialSharesCountRedditMax optional.Int32
    Clusters optional.Interface
}

/*
ListTrends List trends
The trends endpoint allows you to identify the most-mentioned entities, concepts and keywords relevant to your query. For example, this endpoint allows you to set parameters like a time period, a subject category, or an entity, and your request will return the most mentioned entities or keywords that are mentioned in relation to your query. 
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param field This parameter is used to specify the trend field. 
 * @param optional nil or *ListTrendsOpts - Optional Parameters:
 * @param "Id" (optional.Interface of []int64) -  This parameter is used for finding stories by story id. 
 * @param "Id2" (optional.Interface of []int64) -  This parameter is used for excluding stories by story id. 
 * @param "Title" (optional.String) -  This parameter is used for finding stories whose title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
 * @param "Body" (optional.String) -  This parameter is used for finding stories whose body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
 * @param "Text" (optional.String) -  This parameter is used for finding stories whose title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
 * @param "TranslationsEnTitle" (optional.String) -  This parameter is used for finding stories whose translation title contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
 * @param "TranslationsEnBody" (optional.String) -  This parameter is used for finding stories whose translation body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
 * @param "TranslationsEnText" (optional.String) -  This parameter is used for finding stories whose translation title or body contains a specific keyword. It supports [boolean operators](https://newsapi.aylien.com/docs/boolean-operators). 
 * @param "LinksPermalink" (optional.Interface of []string) -  This parameter is used to find stories based on their url. 
 * @param "LinksPermalink2" (optional.Interface of []string) -  This parameter is used to exclude stories based on their url. 
 * @param "Language" (optional.Interface of []string) -  This parameter is used for finding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
 * @param "Language2" (optional.Interface of []string) -  This parameter is used for excluding stories whose language is the specified value. It supports [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes. 
 * @param "PublishedAtStart" (optional.String) -  This parameter is used for finding stories whose published at time is greater than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
 * @param "PublishedAtEnd" (optional.String) -  This parameter is used for finding stories whose published at time is less than the specified value. [Here](https://newsapi.aylien.com/docs/working-with-dates) you can find more information about how [to work with dates](https://newsapi.aylien.com/docs/working-with-dates). 
 * @param "CategoriesTaxonomy" (optional.String) -  This parameter is used for defining the type of the taxonomy for the rest of the categories queries. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
 * @param "CategoriesConfident" (optional.Bool) -  This parameter is used for finding stories whose categories are confident. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
 * @param "CategoriesId" (optional.Interface of []string) -  This parameter is used for finding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
 * @param "CategoriesId2" (optional.Interface of []string) -  This parameter is used for excluding stories by categories id. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
 * @param "CategoriesLabel" (optional.Interface of []string) -  This parameter is used for finding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
 * @param "CategoriesLabel2" (optional.Interface of []string) -  This parameter is used for excluding stories by categories label. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
 * @param "CategoriesLevel" (optional.Interface of []int32) -  This parameter is used for finding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
 * @param "CategoriesLevel2" (optional.Interface of []int32) -  This parameter is used for excluding stories by categories level. You can read more about working with categories [here](https://newsapi.aylien.com/docs/working-with-categories). 
 * @param "EntitiesTitleText" (optional.Interface of []string) -  This parameter is used to find stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesTitleText2" (optional.Interface of []string) -  This parameter is used to exclude stories based on the specified entities `text` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesTitleType" (optional.Interface of []string) -  This parameter is used to find stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesTitleType2" (optional.Interface of []string) -  This parameter is used to exclude stories based on the specified entities `type` in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesTitleLinksDbpedia" (optional.Interface of []string) -  This parameter is used to find stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesTitleLinksDbpedia2" (optional.Interface of []string) -  This parameter is used to exclude stories based on the specified entities dbpedia URL in story titles. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesBodyText" (optional.Interface of []string) -  This parameter is used to find stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesBodyText2" (optional.Interface of []string) -  This parameter is used to exclude stories based on the specified entities `text` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesBodyType" (optional.Interface of []string) -  This parameter is used to find stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesBodyType2" (optional.Interface of []string) -  This parameter is used to exclude stories based on the specified entities `type` in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesBodyLinksDbpedia" (optional.Interface of []string) -  This parameter is used to find stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "EntitiesBodyLinksDbpedia2" (optional.Interface of []string) -  This parameter is used to exclude stories based on the specified entities dbpedia URL in the body of stories. You can read more about working with entities [here](https://newsapi.aylien.com/docs/working-with-entities). 
 * @param "SentimentTitlePolarity" (optional.String) -  This parameter is used for finding stories whose title sentiment is the specified value. 
 * @param "SentimentTitlePolarity2" (optional.String) -  This parameter is used for excluding stories whose title sentiment is the specified value. 
 * @param "SentimentBodyPolarity" (optional.String) -  This parameter is used for finding stories whose body sentiment is the specified value. 
 * @param "SentimentBodyPolarity2" (optional.String) -  This parameter is used for excluding stories whose body sentiment is the specified value. 
 * @param "MediaImagesCountMin" (optional.Int32) -  This parameter is used for finding stories whose number of images is greater than or equal to the specified value. 
 * @param "MediaImagesCountMax" (optional.Int32) -  This parameter is used for finding stories whose number of images is less than or equal to the specified value. 
 * @param "MediaImagesWidthMin" (optional.Int32) -  This parameter is used for finding stories whose width of images are greater than or equal to the specified value. 
 * @param "MediaImagesWidthMax" (optional.Int32) -  This parameter is used for finding stories whose width of images are less than or equal to the specified value. 
 * @param "MediaImagesHeightMin" (optional.Int32) -  This parameter is used for finding stories whose height of images are greater than or equal to the specified value. 
 * @param "MediaImagesHeightMax" (optional.Int32) -  This parameter is used for finding stories whose height of images are less than or equal to the specified value. 
 * @param "MediaImagesContentLengthMin" (optional.Int32) -  This parameter is used for finding stories whose images content length are greater than or equal to the specified value. 
 * @param "MediaImagesContentLengthMax" (optional.Int32) -  This parameter is used for finding stories whose images content length are less than or equal to the specified value. 
 * @param "MediaImagesFormat" (optional.Interface of []string) -  This parameter is used for finding stories whose images format are the specified value. 
 * @param "MediaImagesFormat2" (optional.Interface of []string) -  This parameter is used for excluding stories whose images format are the specified value. 
 * @param "MediaVideosCountMin" (optional.Int32) -  This parameter is used for finding stories whose number of videos is greater than or equal to the specified value. 
 * @param "MediaVideosCountMax" (optional.Int32) -  This parameter is used for finding stories whose number of videos is less than or equal to the specified value. 
 * @param "AuthorId" (optional.Interface of []int32) -  This parameter is used for finding stories whose author id is the specified value. 
 * @param "AuthorId2" (optional.Interface of []int32) -  This parameter is used for excluding stories whose author id is the specified value. 
 * @param "AuthorName" (optional.String) -  This parameter is used for finding stories whose author full name contains the specified value. 
 * @param "AuthorName2" (optional.String) -  This parameter is used for excluding stories whose author full name contains the specified value. 
 * @param "SourceId" (optional.Interface of []int32) -  This parameter is used for finding stories whose source id is the specified value. 
 * @param "SourceId2" (optional.Interface of []int32) -  This parameter is used for excluding stories whose source id is the specified value. 
 * @param "SourceName" (optional.Interface of []string) -  This parameter is used for finding stories whose source name contains the specified value. 
 * @param "SourceName2" (optional.Interface of []string) -  This parameter is used for excluding stories whose source name contains the specified value. 
 * @param "SourceDomain" (optional.Interface of []string) -  This parameter is used for finding stories whose source domain is the specified value. 
 * @param "SourceDomain2" (optional.Interface of []string) -  This parameter is used for excluding stories whose source domain is the specified value. 
 * @param "SourceLocationsCountry" (optional.Interface of []string) -  This parameter is used for finding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceLocationsCountry2" (optional.Interface of []string) -  This parameter is used for excluding stories whose source country is the specified value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceLocationsState" (optional.Interface of []string) -  This parameter is used for finding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceLocationsState2" (optional.Interface of []string) -  This parameter is used for excluding stories whose source state/province is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceLocationsCity" (optional.Interface of []string) -  This parameter is used for finding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceLocationsCity2" (optional.Interface of []string) -  This parameter is used for excluding stories whose source city is the specified value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceScopesCountry" (optional.Interface of []string) -  This parameter is used for finding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceScopesCountry2" (optional.Interface of []string) -  This parameter is used for excluding stories whose source scopes is the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceScopesState" (optional.Interface of []string) -  This parameter is used for finding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceScopesState2" (optional.Interface of []string) -  This parameter is used for excluding stories whose source scopes is the specified state/province value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceScopesCity" (optional.Interface of []string) -  This parameter is used for finding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceScopesCity2" (optional.Interface of []string) -  This parameter is used for excluding stories whose source scopes is the specified city value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceScopesLevel" (optional.Interface of []string) -  This parameter is used for finding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceScopesLevel2" (optional.Interface of []string) -  This parameter is used for excluding stories whose source scopes is the specified level value. [Here](https://newsapi.aylien.com/docs/working-with-locations) you can find more information about how [to work with locations](https://newsapi.aylien.com/docs/working-with-locations). 
 * @param "SourceLinksInCountMin" (optional.Int32) -  This parameter is used for finding stories from sources whose Links in count is greater than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
 * @param "SourceLinksInCountMax" (optional.Int32) -  This parameter is used for finding stories from sources whose Links in count is less than or equal to the specified value. You can read more about working with Links in count [here](https://newsapi.aylien.com/docs/working-with-links-in-count). 
 * @param "SourceRankingsAlexaRankMin" (optional.Int32) -  This parameter is used for finding stories from sources whose Alexa rank is greater than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
 * @param "SourceRankingsAlexaRankMax" (optional.Int32) -  This parameter is used for finding stories from sources whose Alexa rank is less than or equal to the specified value. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
 * @param "SourceRankingsAlexaCountry" (optional.Interface of []string) -  This parameter is used for finding stories from sources whose Alexa rank is in the specified country value. It supports [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes. You can read more about working with Alexa ranks [here](https://newsapi.aylien.com/docs/working-with-alexa-ranks). 
 * @param "SocialSharesCountFacebookMin" (optional.Int32) -  This parameter is used for finding stories whose Facebook social shares count is greater than or equal to the specified value. 
 * @param "SocialSharesCountFacebookMax" (optional.Int32) -  This parameter is used for finding stories whose Facebook social shares count is less than or equal to the specified value. 
 * @param "SocialSharesCountGooglePlusMin" (optional.Int32) -  This parameter is used for finding stories whose Google+ social shares count is greater than or equal to the specified value. 
 * @param "SocialSharesCountGooglePlusMax" (optional.Int32) -  This parameter is used for finding stories whose Google+ social shares count is less than or equal to the specified value. 
 * @param "SocialSharesCountLinkedinMin" (optional.Int32) -  This parameter is used for finding stories whose LinkedIn social shares count is greater than or equal to the specified value. 
 * @param "SocialSharesCountLinkedinMax" (optional.Int32) -  This parameter is used for finding stories whose LinkedIn social shares count is less than or equal to the specified value. 
 * @param "SocialSharesCountRedditMin" (optional.Int32) -  This parameter is used for finding stories whose Reddit social shares count is greater than or equal to the specified value. 
 * @param "SocialSharesCountRedditMax" (optional.Int32) -  This parameter is used for finding stories whose Reddit social shares count is less than or equal to the specified value. 
 * @param "Clusters" (optional.Interface of []string) -  This parameter is used for finding stories with belonging to one of clusters in a specific set of clusters You can read more about working with clustering [here](https://newsapi.aylien.com/docs/working-with-clustering). 
@return Trends
*/
func (a *TrendsApiService) ListTrends(ctx _context.Context, field string, localVarOptionals *ListTrendsOpts) (Trends, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Trends
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/trends"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		t:=localVarOptionals.Id.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Id2.IsSet() {
		t:=localVarOptionals.Id2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!id[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Title.IsSet() {
		localVarQueryParams.Add("title", parameterToString(localVarOptionals.Title.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		localVarQueryParams.Add("body", parameterToString(localVarOptionals.Body.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Text.IsSet() {
		localVarQueryParams.Add("text", parameterToString(localVarOptionals.Text.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TranslationsEnTitle.IsSet() {
		localVarQueryParams.Add("translations.en.title", parameterToString(localVarOptionals.TranslationsEnTitle.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TranslationsEnBody.IsSet() {
		localVarQueryParams.Add("translations.en.body", parameterToString(localVarOptionals.TranslationsEnBody.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TranslationsEnText.IsSet() {
		localVarQueryParams.Add("translations.en.text", parameterToString(localVarOptionals.TranslationsEnText.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LinksPermalink.IsSet() {
		t:=localVarOptionals.LinksPermalink.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("links.permalink[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("links.permalink[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.LinksPermalink2.IsSet() {
		t:=localVarOptionals.LinksPermalink2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!links.permalink[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!links.permalink[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Language.IsSet() {
		t:=localVarOptionals.Language.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("language[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("language[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Language2.IsSet() {
		t:=localVarOptionals.Language2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!language[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!language[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.PublishedAtStart.IsSet() {
		localVarQueryParams.Add("published_at.start", parameterToString(localVarOptionals.PublishedAtStart.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishedAtEnd.IsSet() {
		localVarQueryParams.Add("published_at.end", parameterToString(localVarOptionals.PublishedAtEnd.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CategoriesTaxonomy.IsSet() {
		localVarQueryParams.Add("categories.taxonomy", parameterToString(localVarOptionals.CategoriesTaxonomy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CategoriesConfident.IsSet() {
		localVarQueryParams.Add("categories.confident", parameterToString(localVarOptionals.CategoriesConfident.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CategoriesId.IsSet() {
		t:=localVarOptionals.CategoriesId.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("categories.id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("categories.id[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.CategoriesId2.IsSet() {
		t:=localVarOptionals.CategoriesId2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!categories.id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!categories.id[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.CategoriesLabel.IsSet() {
		t:=localVarOptionals.CategoriesLabel.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("categories.label[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("categories.label[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.CategoriesLabel2.IsSet() {
		t:=localVarOptionals.CategoriesLabel2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!categories.label[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!categories.label[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.CategoriesLevel.IsSet() {
		t:=localVarOptionals.CategoriesLevel.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("categories.level[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("categories.level[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.CategoriesLevel2.IsSet() {
		t:=localVarOptionals.CategoriesLevel2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!categories.level[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!categories.level[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesTitleText.IsSet() {
		t:=localVarOptionals.EntitiesTitleText.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entities.title.text[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entities.title.text[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesTitleText2.IsSet() {
		t:=localVarOptionals.EntitiesTitleText2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!entities.title.text[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!entities.title.text[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesTitleType.IsSet() {
		t:=localVarOptionals.EntitiesTitleType.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entities.title.type[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entities.title.type[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesTitleType2.IsSet() {
		t:=localVarOptionals.EntitiesTitleType2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!entities.title.type[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!entities.title.type[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesTitleLinksDbpedia.IsSet() {
		t:=localVarOptionals.EntitiesTitleLinksDbpedia.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entities.title.links.dbpedia[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entities.title.links.dbpedia[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesTitleLinksDbpedia2.IsSet() {
		t:=localVarOptionals.EntitiesTitleLinksDbpedia2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!entities.title.links.dbpedia[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!entities.title.links.dbpedia[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesBodyText.IsSet() {
		t:=localVarOptionals.EntitiesBodyText.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entities.body.text[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entities.body.text[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesBodyText2.IsSet() {
		t:=localVarOptionals.EntitiesBodyText2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!entities.body.text[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!entities.body.text[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesBodyType.IsSet() {
		t:=localVarOptionals.EntitiesBodyType.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entities.body.type[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entities.body.type[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesBodyType2.IsSet() {
		t:=localVarOptionals.EntitiesBodyType2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!entities.body.type[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!entities.body.type[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesBodyLinksDbpedia.IsSet() {
		t:=localVarOptionals.EntitiesBodyLinksDbpedia.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entities.body.links.dbpedia[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entities.body.links.dbpedia[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.EntitiesBodyLinksDbpedia2.IsSet() {
		t:=localVarOptionals.EntitiesBodyLinksDbpedia2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!entities.body.links.dbpedia[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!entities.body.links.dbpedia[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SentimentTitlePolarity.IsSet() {
		localVarQueryParams.Add("sentiment.title.polarity", parameterToString(localVarOptionals.SentimentTitlePolarity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SentimentTitlePolarity2.IsSet() {
		localVarQueryParams.Add("!sentiment.title.polarity", parameterToString(localVarOptionals.SentimentTitlePolarity2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SentimentBodyPolarity.IsSet() {
		localVarQueryParams.Add("sentiment.body.polarity", parameterToString(localVarOptionals.SentimentBodyPolarity.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SentimentBodyPolarity2.IsSet() {
		localVarQueryParams.Add("!sentiment.body.polarity", parameterToString(localVarOptionals.SentimentBodyPolarity2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesCountMin.IsSet() {
		localVarQueryParams.Add("media.images.count.min", parameterToString(localVarOptionals.MediaImagesCountMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesCountMax.IsSet() {
		localVarQueryParams.Add("media.images.count.max", parameterToString(localVarOptionals.MediaImagesCountMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesWidthMin.IsSet() {
		localVarQueryParams.Add("media.images.width.min", parameterToString(localVarOptionals.MediaImagesWidthMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesWidthMax.IsSet() {
		localVarQueryParams.Add("media.images.width.max", parameterToString(localVarOptionals.MediaImagesWidthMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesHeightMin.IsSet() {
		localVarQueryParams.Add("media.images.height.min", parameterToString(localVarOptionals.MediaImagesHeightMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesHeightMax.IsSet() {
		localVarQueryParams.Add("media.images.height.max", parameterToString(localVarOptionals.MediaImagesHeightMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesContentLengthMin.IsSet() {
		localVarQueryParams.Add("media.images.content_length.min", parameterToString(localVarOptionals.MediaImagesContentLengthMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesContentLengthMax.IsSet() {
		localVarQueryParams.Add("media.images.content_length.max", parameterToString(localVarOptionals.MediaImagesContentLengthMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesFormat.IsSet() {
		t:=localVarOptionals.MediaImagesFormat.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("media.images.format[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("media.images.format[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.MediaImagesFormat2.IsSet() {
		t:=localVarOptionals.MediaImagesFormat2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!media.images.format[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!media.images.format[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.MediaVideosCountMin.IsSet() {
		localVarQueryParams.Add("media.videos.count.min", parameterToString(localVarOptionals.MediaVideosCountMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MediaVideosCountMax.IsSet() {
		localVarQueryParams.Add("media.videos.count.max", parameterToString(localVarOptionals.MediaVideosCountMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuthorId.IsSet() {
		t:=localVarOptionals.AuthorId.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("author.id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("author.id[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.AuthorId2.IsSet() {
		t:=localVarOptionals.AuthorId2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!author.id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!author.id[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.AuthorName.IsSet() {
		localVarQueryParams.Add("author.name", parameterToString(localVarOptionals.AuthorName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuthorName2.IsSet() {
		localVarQueryParams.Add("!author.name", parameterToString(localVarOptionals.AuthorName2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceId.IsSet() {
		t:=localVarOptionals.SourceId.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.id[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceId2.IsSet() {
		t:=localVarOptionals.SourceId2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.id[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.id[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceName.IsSet() {
		t:=localVarOptionals.SourceName.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.name[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.name[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceName2.IsSet() {
		t:=localVarOptionals.SourceName2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.name[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.name[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceDomain.IsSet() {
		t:=localVarOptionals.SourceDomain.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.domain[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.domain[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceDomain2.IsSet() {
		t:=localVarOptionals.SourceDomain2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.domain[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.domain[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceLocationsCountry.IsSet() {
		t:=localVarOptionals.SourceLocationsCountry.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.locations.country[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.locations.country[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceLocationsCountry2.IsSet() {
		t:=localVarOptionals.SourceLocationsCountry2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.locations.country[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.locations.country[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceLocationsState.IsSet() {
		t:=localVarOptionals.SourceLocationsState.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.locations.state[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.locations.state[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceLocationsState2.IsSet() {
		t:=localVarOptionals.SourceLocationsState2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.locations.state[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.locations.state[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceLocationsCity.IsSet() {
		t:=localVarOptionals.SourceLocationsCity.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.locations.city[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.locations.city[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceLocationsCity2.IsSet() {
		t:=localVarOptionals.SourceLocationsCity2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.locations.city[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.locations.city[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceScopesCountry.IsSet() {
		t:=localVarOptionals.SourceScopesCountry.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.scopes.country[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.scopes.country[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceScopesCountry2.IsSet() {
		t:=localVarOptionals.SourceScopesCountry2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.scopes.country[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.scopes.country[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceScopesState.IsSet() {
		t:=localVarOptionals.SourceScopesState.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.scopes.state[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.scopes.state[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceScopesState2.IsSet() {
		t:=localVarOptionals.SourceScopesState2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.scopes.state[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.scopes.state[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceScopesCity.IsSet() {
		t:=localVarOptionals.SourceScopesCity.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.scopes.city[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.scopes.city[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceScopesCity2.IsSet() {
		t:=localVarOptionals.SourceScopesCity2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.scopes.city[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.scopes.city[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceScopesLevel.IsSet() {
		t:=localVarOptionals.SourceScopesLevel.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.scopes.level[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.scopes.level[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceScopesLevel2.IsSet() {
		t:=localVarOptionals.SourceScopesLevel2.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("!source.scopes.level[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("!source.scopes.level[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SourceLinksInCountMin.IsSet() {
		localVarQueryParams.Add("source.links_in_count.min", parameterToString(localVarOptionals.SourceLinksInCountMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceLinksInCountMax.IsSet() {
		localVarQueryParams.Add("source.links_in_count.max", parameterToString(localVarOptionals.SourceLinksInCountMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceRankingsAlexaRankMin.IsSet() {
		localVarQueryParams.Add("source.rankings.alexa.rank.min", parameterToString(localVarOptionals.SourceRankingsAlexaRankMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceRankingsAlexaRankMax.IsSet() {
		localVarQueryParams.Add("source.rankings.alexa.rank.max", parameterToString(localVarOptionals.SourceRankingsAlexaRankMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceRankingsAlexaCountry.IsSet() {
		t:=localVarOptionals.SourceRankingsAlexaCountry.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source.rankings.alexa.country[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source.rankings.alexa.country[]", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.SocialSharesCountFacebookMin.IsSet() {
		localVarQueryParams.Add("social_shares_count.facebook.min", parameterToString(localVarOptionals.SocialSharesCountFacebookMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SocialSharesCountFacebookMax.IsSet() {
		localVarQueryParams.Add("social_shares_count.facebook.max", parameterToString(localVarOptionals.SocialSharesCountFacebookMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SocialSharesCountGooglePlusMin.IsSet() {
		localVarQueryParams.Add("social_shares_count.google_plus.min", parameterToString(localVarOptionals.SocialSharesCountGooglePlusMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SocialSharesCountGooglePlusMax.IsSet() {
		localVarQueryParams.Add("social_shares_count.google_plus.max", parameterToString(localVarOptionals.SocialSharesCountGooglePlusMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SocialSharesCountLinkedinMin.IsSet() {
		localVarQueryParams.Add("social_shares_count.linkedin.min", parameterToString(localVarOptionals.SocialSharesCountLinkedinMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SocialSharesCountLinkedinMax.IsSet() {
		localVarQueryParams.Add("social_shares_count.linkedin.max", parameterToString(localVarOptionals.SocialSharesCountLinkedinMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SocialSharesCountRedditMin.IsSet() {
		localVarQueryParams.Add("social_shares_count.reddit.min", parameterToString(localVarOptionals.SocialSharesCountRedditMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SocialSharesCountRedditMax.IsSet() {
		localVarQueryParams.Add("social_shares_count.reddit.max", parameterToString(localVarOptionals.SocialSharesCountRedditMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Clusters.IsSet() {
		t:=localVarOptionals.Clusters.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("clusters[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("clusters[]", parameterToString(t, "multi"))
		}
	}
	localVarQueryParams.Add("field", parameterToString(field, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-AYLIEN-NewsAPI-Application-ID"] = key
		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-AYLIEN-NewsAPI-Application-Key"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v Trends
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
